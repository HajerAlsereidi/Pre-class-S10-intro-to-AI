class SudokuSolver:
    def __init__(self, board):
        self.board = board  # 9x9 Sudoku grid

    def print_board(self):
        """Prints the Sudoku board."""
        for i in range(9):
            if i % 3 == 0 and i != 0:
                print("- - - - - - - - - - -")
            for j in range(9):
                if j % 3 == 0 and j != 0:
                    print("|", end=" ")
                print(self.board[i][j], end=" ")
            print()

    def find_empty(self):
        """Finds the next empty space (0) in the Sudoku board."""
        for i in range(9):
            for j in range(9):
                if self.board[i][j] == 0:
                    return i, j  # row, column
        return None

    def is_valid(self, num, position):
        """Checks if placing 'num' at 'position' (row, col) is valid."""
        row, col = position

        # Check row
        if num in self.board[row]:
            return False

        # Check column
        if num in [self.board[i][col] for i in range(9)]:
            return False

        # Check 3x3 box
        box_x = col // 3
        box_y = row // 3
        for i in range(box_y * 3, box_y * 3 + 3):
            for j in range(box_x * 3, box_x * 3 + 3):
                if self.board[i][j] == num:
                    return False

        return True

    def solve(self):
        """Solves the Sudoku puzzle using backtracking."""
        empty = self.find_empty()
        if not empty:
            return True  # Solved

        row, col = empty
        for num in range(1, 10):  # Try numbers 1-9
            if self.is_valid(num, (row, col)):
                self.board[row][col] = num

                if self.solve():
                    return True

                self.board[row][col] = 0  # Undo and try next number

        return False

# Example Sudoku Board (0 represents empty spaces)
sudoku_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

solver = SudokuSolver(sudoku_board)
print("Sudoku Puzzle Before Solving:")
solver.print_board()

if solver.solve():
    print("\nSolved Sudoku:")
    solver.print_board()
else:
    print("No solution exists!")
